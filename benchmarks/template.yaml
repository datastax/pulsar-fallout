# Use NosqLBench to create traffic on Pulsar
notes: Test with NB
image:
   name: apachepulsar/pulsar-all
   version: 2.7.2
clientimage:
   name: apachepulsar/pulsar-all
   version: 2.7.2
helmchart:
  reponame: datastax-pulsar
  repourl: https://datastax.github.io/pulsar-helm-chart/
  chartname: datastax-pulsar/pulsar
cluster:
  numNodes: 6
  numBookies: 3
  numBrokers: 1
  numZookeepers: 1
  numProxies: 1
  antiaffinity: no
replication:
  bkEnsembleSize: 2
  bkAckQuorum: 2
  bkWriteQuorum: 2
producer:
  nummessages: 1000000
  threads: 5
topic:
  numpartitions: 4
  partitioned: true
  name: persistent://public/default/test
failure_injection:
  enable: false
  bookkeeper: false
  zookeeper: false
  broker: false
rollout:
  enable: false
  resource: pulsar-broker
  resourcetype: deployment
pulsar_configuration:
  - key: loadBalancerBrokerOverloadedThresholdPercentage
    value: "\"95\""
  - key: loadBalancerLoadSheddingStrategy
    value: "\"org.apache.pulsar.broker.loadbalance.impl.OverloadShedder\""
  - key: loadBalancerBrokerThresholdShedderPercentage
    value: "\"10\""
system:
  probe_period_seconds: 30
namespace: "mypulsar"
gke_project: SET-PROJECT-NAME
---
ensemble:
  local_files:
    - path: chaos-mesh-dashboard-values.yaml
      data: |
            dashboard:
              create: true
              securityMode: false
    - path: bookkeeper-failures.yaml
      yaml:
        apiVersion: chaos-mesh.org/v1alpha1
        kind: PodChaos
        metadata:
          name: bookie-failure-example
        spec:
          action: pod-kill
          mode: one
          duration: "30s"
          selector:
            labelSelectors:
              'component': 'bookkeeper'
          scheduler:
              cron: '@every 2m'
    - path: zk-failures.yaml
      yaml:
        apiVersion: chaos-mesh.org/v1alpha1
        kind: PodChaos
        metadata:
          name: zk-failure-example
        spec:
          action: pod-kill
          mode: one
          duration: "30s"
          selector:
            labelSelectors:
              'component': 'zookeeper'
          scheduler:
              cron: '@every 2m'
    - path: broker-failures.yaml
      yaml:
        apiVersion: chaos-mesh.org/v1alpha1
        kind: PodChaos
        metadata:
          name: broker-failure-example
        spec:
          action: pod-kill
          mode: one
          duration: "30s"
          selector:
            labelSelectors:
              'component': 'broker'
          scheduler:
              cron: '@every 2m'
    - path: createtopic.yaml
      yaml:
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: createtopic
        spec:
          template:
            spec:
              containers:
                - name: createtopicrunner
                  image: '{{clientimage.name}}:{{clientimage.version}}'
                  command:
                    - /bin/sh
                    - -c
                    - >-
                      env &&
                      /pulsar/bin/apply-config-from-env.py /pulsar/conf/client.conf &&
                      bin/pulsar-admin topics create-partitioned-topic
                      -p {{topic.numpartitions}}
                      {{topic.name}}
                  env:
                    - name: webServiceUrl
                      value: http://pulsar-proxy:8080/
                    - name: brokerServiceUrl
                      value: pulsar://pulsar-proxy:6650/
              restartPolicy: Never
    - path: pulsar-values.yaml
      data: |
            enableAntiAffinity: {{cluster.antiaffinity}}
            enableTls: no
            initialize: true  # ASF Helm Chart
            enableTokenAuth: no
            affinity: # ASF Helm Chart
              anti_affinity: no
            restartOnConfigMapChange:
              enabled: yes
            image:
              zookeeper:
                repository: {{image.name}}
                tag: {{image.version}}
              bookie:
                repository: {{image.name}}
                tag: {{image.version}}
              bookkeeper:
                repository: {{image.name}}
                tag: {{image.version}}
              autorecovery:
                repository: {{image.name}}
                tag: {{image.version}}
              broker:
                repository: {{image.name}}
                tag: {{image.version}}
              proxy:
                repository: {{image.name}}
                tag: {{image.version}}
              functions:
                repository: {{image.name}}
                tag: {{image.version}}
            extra:
              function: no
              burnell: no
              burnellLogCollector: no
              pulsarHeartbeat: no
              pulsarAdminConsole: no
            volumes:
              data: #ASF Helm Chart
                storageClassName: existent-storage-class
            zookeeper:
              replicaCount: {{cluster.numZookeepers}}
            bookkeeper:
              replicaCount: {{cluster.numBookies}}
            broker:
              component: broker
              probe:
                  period: {{system.probe_period_seconds}}
              replicaCount: {{cluster.numBrokers}}
              ledger:
                defaultEnsembleSize: {{replication.bkEnsembleSize}}
                defaultAckQuorum:  {{replication.bkAckQuorum}}
                defaultWriteQuorum: {{replication.bkWriteQuorum}}
              configData:
{{#pulsar_configuration}}
                {{key}}: {{value}}
{{/pulsar_configuration}}
            function:
              replicaCount: 0
              functionReplicaCount: 1
            proxy:
              replicaCount: {{cluster.numProxies}}
              autoPortAssign:
                enablePlainTextWithTLS: yes
              service:
                type: ClusterIP
                autoPortAssign:
                  enabled: yes
            grafanaDashboards:
              enabled: yes
            pulsarAdminConsole:
              replicaCount: 0
              service:
                type: ClusterIP
            grafana: #ASF Helm Chart
              service:
                type: ClusterIP
            pulsar_manager:
              service: #ASF Helm Chart
                type: ClusterIP
            kube-prometheus-stack: # Luna Streaming Helm Chart
              enabled: yes
              prometheusOperator:
                enabled: yes
              grafana:
                enabled: yes
                adminPassword: e9JYtk83*4#PM8
                service:
                  type: ClusterIP
            pulsarSQL:
              service:
                type: ClusterIP
  server:
    node.count: {{cluster.numNodes}}
    provisioner:
      name: gke
      properties:
        project: {{gke_project}}
        region: us-west2
        machine.type: e2-standard-8
        create.extra_args: --enable-autoupgrade
    configuration_manager:
      - name: helm
        properties:
          namespace: {{namespace}}
          helm.install.type: repo
          helm.install.name: mypulsar
          helm.install.values.file: <<file:pulsar-values.yaml>>
          helm.install.debug: true
          helm.install.timeout: 1200s
          helm.repo.name: {{helmchart.reponame}}
          helm.repo.url:  {{helmchart.repourl}}
          helm.chart.name: {{helmchart.chartname}}
          provider.class: com.datastax.fallout.components.cassandra.CassandraContactPointProvider
          provider.args: ["dummy-cassandra"]
      - name: kubernetes_logs
        properties:
          container_logs_namespace: {{namespace}}
          ignore_failures: true
      - name: remote_files
        properties:
          files:
            - path: config.txt
              namespace: mypulsar
              data: |
                ### Schema related configurations - schema.xxx
                schema.type =
                schema.definition =
                ## check http://pulsar.apache.org/docs/en/client-libraries-java/
                ### Pulsar client related configurations - client.xxx
                client.connectionTimeoutMs = 5000
                consumer.subscriptionInitialPosition=Earliest
                consumer.subscriptionName=nb
                consumer.subscriptionType=Shared
                ### error if no record is received in 20 minutes
                consumer.timeout=1200
                producer.topicName = persistent://public/default/test
                producer.producerName =
                producer.sendTimeoutMs =
                producer.blockIfQueueFull=true
                producer.maxPendingMessages=1000
                producer.maxPendingMessagesAcrossPartitions=5000
            - path: pulsar.yaml
              namespace: mypulsar
              yaml:
                description: |
                  Test workload for pulsar driver.                
                bindings:
                  mykey: NumberNameToString();
                  payload: AlphaNumericString(100);
                blocks:
                  - name: producer-block
                    tags:
                      phase: producer
                      optype: msg-send
                    statements:
                      - producer-stuff:
                          optype: msg-send
                          topic_uri: "persistent://public/default/test"
                          async_api: "true"
                          msg_value: "{payload}"
                  - name: consumer-block
                    tags:
                      phase: consumer
                    statements:
                      - consumer-stuff:
                          optype: msg-consume
                          topic_uri: "persistent://public/default/test"
                          subscription-name: nb
                          subscription-type: Shared                          
{{#failure_injection.enable}}
      - name: helm
        properties:
          namespace: chaos-testing
          helm.install.type: repo
          helm.install.name: chaos-mesh
          helm.install.values.file: <<file:chaos-mesh-dashboard-values.yaml>>
          helm.repo.name: chaos-mesh
          helm.repo.url: https://charts.chaos-mesh.org
          helm.chart.name: chaos-mesh
{{/failure_injection.enable}}
      - name: nosqlbench
        properties:
          namespace: {{namespace}}
          replicas: 1
          image: eolivelli/nosqlbench:latest
          nosqlbench.resources:
            - <<file:config.txt>>
            - <<file:pulsar.yaml>>
  client: server

workload:
  phases:
{{#failure_injection.enable}}
    # chaos-manager-controller failed to init as resources are not applied yet.
    - boilerplate-fix-chaos-mesh-installation:
        - apply-chaos-resources:
            module: kubectl
            properties:
              command: apply -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/manifests/crd.yaml
        - apply-chaos-provisioner:
            module: kubectl
            properties:
              command: apply -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/manifests/local-volume-provisioner.yaml
        - apply-chaos-rbac:
            module: kubectl
            properties:
              command: apply -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/chart-0.4.1/manifests/tiller-rbac.yaml
        # wait for failed chaos-control-manager to restart
        - wait-for-chaos-setup:
            module: sleep
            properties:
              duration: 3m
{{/failure_injection.enable}}
{{#topic.partitioned}}
    - create-topic:
        module: kubernetes_job
        properties:
          namespace: {{namespace}}
          manifest: <<file:createtopic.yaml>>
          capture_container_logs: true
{{/topic.partitioned}}
    - concurrent-read-write:
      - produce_messages:
          module: nosqlbench
          properties:
            cycles: {{producer.nummessages}}
            args:
              - type=pulsar
              - config=<<file:config.txt>>
              - yaml=<<file:pulsar.yaml>>
              - tags=phase:producer
              - service_url=pulsar://pulsar-proxy:6650
              - web_url=http://pulsar-proxy:8080
              - optype=msg-send
              - threads={{producer.threads}}
        consume_messages:
          module: nosqlbench
          properties:
            cycles: {{producer.nummessages}}
            args:
              - type=pulsar
              - config=<<file:config.txt>>
              - yaml=<<file:pulsar.yaml>>
              - tags=phase:consumer
              - service_url=pulsar://pulsar-proxy:6650
              - web_url=http://pulsar-proxy:8080
              - optype=msg-consume
{{#failure_injection.bookkeeper}}
        pod-failure-chaos-bk:
          module: kubectl
          properties:
            command: apply --namespace {{namespace}} -f <<file:bookkeeper-failures.yaml>>
{{/failure_injection.bookkeeper}}
{{#failure_injection.zookeeper}}
        pod-failure-chaos-zk:
          module: kubectl
          properties:
            command: apply --namespace {{namespace}} -f <<file:zk-failures.yaml>>
{{/failure_injection.zookeeper}}
{{#failure_injection.broker}}
        pod-failure-chaos-broker:
          module: kubectl
          properties:
            command: apply --namespace {{namespace}} -f <<file:broker-failures.yaml>>
{{/failure_injection.broker}}
{{#failure_injection.enable}}
    - wait-for-chaos-end:
            module: sleep
            properties:
              duration: 3m
{{/failure_injection.enable}}
  checkers:
    nofail:
      checker: nofail
  artifact_checkers:
    generate_chart:
        artifact_checker: hdrtool